/*
This file is generated and isn't the actual source code for this
managed global class.
This read-only file shows the class's global constructors,
methods, variables, and properties.
To enable code to compile, all methods return null.
*/
global abstract class ACrossPackageService extends nFORCE.AResourceExposureType {
    global ACrossPackageService() {

    }
    global override virtual void addSerializedInputParameterOverload(String inputParamName, String inputOverloadName) {

    }
    global override void addSupportedInputParameter(String inputParamName, Boolean required, Object inputParamType) {

    }
    global override void addSupportedInputParameter(String inputParamName, Boolean required, Object inputParamType, String description) {

    }
    global override void addSupportedInputParameter(String inputParamName, Boolean required, Object inputParamType, String description, Object defaultValue) {

    }
    global override virtual Object deserializeOverload(String serializeString, System.Type expectedType) {
        return null;
    }
    global override virtual Object document() {
        return null;
    }
    global abstract void execute();
    global override void executeService() {

    }
    global override Object getInputParameter(String parameterName) {
        return null;
    }
    global override Map<String,Object> getInputParameters() {
        return null;
    }
    global override Object getOutputParameter(String parameterName) {
        return null;
    }
    global override virtual dom.Document getOutputParametersAsXmlDom() {
        return null;
    }
    global override Map<String,Object> getOutputParameters() {
        return null;
    }
    global override virtual Boolean isSecurityEnabled() {
        return null;
    }
    global override void setInputParameter(String parameterName, Object parameterValue) {

    }
    global override void setOutputParameter(String parameterName, Object parameterValue) {

    }
    global override virtual void setResourceExposures(List<Object> resourceExposures) {

    }
    global override virtual void withSecurity() {

    }
    global override virtual void withoutSecurity() {

    }
}
